import pandas as pd

import re
from pathlib import Path
from abc import ABCMeta, abstractmethod
import sys
sys.path.append('..')

from utils import timer


class Feature(metaclass=ABCMeta):
    """
    Class for feature creation
    https://github.com/upura/ml-competition-template-titanic
    """
    def __init__(self, path):
        if self.__class__.__name__.isupper():
            self.name = self.__class__.__name__.lower()
        else:
            self.name = re.sub(
                "([A-Z])",
                lambda x: "_" + x.group(1).lower(), self.__class__.__name__
            ).lstrip('_')

        self.train = pd.DataFrame()
        self.test = pd.DataFrame()
        self.dir = path
        self.train_path = Path(self.dir) / f'{self.name}_train.pkl'
        self.test_path = Path(self.dir) / f'{self.name}_test.pkl'

    def run(self, train, test, logger):
        with timer(self.name, logger):
            self.create_features(train, test)
            logger.debug('[{}] train:{} test:{}'.format(self.name, self.train.shape, self.test.shape))
        return self

    @abstractmethod
    def create_features(self, train, test):
        raise NotImplementedError

    def save(self):
        self.train.to_pickle(str(self.train_path))
        self.test.to_pickle(str(self.test_path))
