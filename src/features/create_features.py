import pandas as pd

import inspect
from pathlib import Path
from datetime import datetime as dt
import sys
sys.path.append('..')

from utils import get_logger, get_arguments
from features import Feature, AllLabelEncoding, AllOnehotEncoding


def get_instances(namespace, features_path):
    """
    retrun instances list of classes in the given namespace
    """
    instances = []

    for _, v in namespace.items():  # extract only classes which subclass is Feature
        if inspect.isclass(v) and issubclass(v, Feature) and not inspect.isabstract(v):
            instances.append(v(features_path))

    return instances


def create_features(namespace, overwrite, path, train, test, logger):
    """
    create features designed by classes in the given namespace
    """
    for f in get_instances(namespace, features_path):
        if f.train_path.exists() and f.test_path.exists() and not overwrite:    # skip if exist
            logger.debug('{0} was skipped'.format(f.name))
        else:   # create feature and save
            f.run(train, test, logger).save()


if __name__ == '__main__':
    # set logger
    start_dt = dt.now()
    logger = get_logger(__name__, start_dt)
    logger.debug('start create_features.py')

    # parse configuration json file
    args = get_arguments()

    # load data
    data_path = Path('..', '..', 'data')
    train = pd.read_pickle(Path(data_path, 'input', 'train.pkl'))
    test = pd.read_pickle(Path(data_path, 'input', 'test.pkl'))

    if args.debug:
        train = train.iloc[:int(len(train) * 0.001), :]
        test = test.iloc[:int(len(test) * 0.001), :]

    logger.debug('train:{0} test:{1}'.format(train.shape, test.shape))

    # features path
    features_path = Path(data_path, 'features')

    # create features
    create_features(namespace=globals(), overwrite=args.force,
                    path=features_path, train=train, test=test, logger=logger)

    logger.debug('finish create_features.py')
